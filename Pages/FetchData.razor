@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<h4>Enter City</h4>
<input type="text" @bind="@ciudad"/>
<button @onclick="@GetWeatherForecast">Search</button>


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    var today = DateTime.Today;

    <h4>Region: @forecasts.region</h4>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Summary</th>
                <th>Min C</th>
                <th>Max C</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts.next_days)
            {
                <tr>
                   
                    <td>@forecast.day</td>
                    <td>@forecast.comment</td>
                    <td>@forecast.min_temp.c.ToString()</td>
                    <td>@forecast.max_temp.c.ToString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast? forecasts;
    private string ciudad = "juarez";


    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast>(ciudad);
    }

    private async Task GetWeatherForecast()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast>(ciudad);
    }

    public partial class WeatherForecast:Forecast
    {
        public string? region { get; set; }
        public Forecast[]? next_days{ get; set; }
    }

    public class Forecast : Temp
    {
        public string? day { get; set; }

        public string? comment { get; set; }

        public Temp? max_temp { get; set; }
        
        public Temp? min_temp { get; set; }

    }

    public class Temp
    {
        public int? c{ get; set; }
        public int? f { get; set; }

    }
}
